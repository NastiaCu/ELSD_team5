# Generated from Expr.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,24,192,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,
        3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,
        5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,
        10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,
        14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,
        16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,
        18,1,19,4,19,170,8,19,11,19,12,19,171,1,20,4,20,175,8,20,11,20,12,
        20,176,1,21,4,21,180,8,21,11,21,12,21,181,1,22,4,22,185,8,22,11,
        22,12,22,186,1,23,1,23,1,23,1,23,0,0,24,1,1,3,2,5,3,7,4,9,5,11,6,
        13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
        18,37,19,39,20,41,21,43,22,45,23,47,24,1,0,5,5,0,44,44,46,47,67,
        67,72,72,82,82,2,0,10,10,13,13,1,0,48,57,1,0,97,122,3,0,9,10,13,
        13,32,32,195,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
        1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,1,49,
        1,0,0,0,3,64,1,0,0,0,5,66,1,0,0,0,7,68,1,0,0,0,9,83,1,0,0,0,11,85,
        1,0,0,0,13,87,1,0,0,0,15,89,1,0,0,0,17,91,1,0,0,0,19,96,1,0,0,0,
        21,102,1,0,0,0,23,112,1,0,0,0,25,120,1,0,0,0,27,132,1,0,0,0,29,139,
        1,0,0,0,31,147,1,0,0,0,33,152,1,0,0,0,35,159,1,0,0,0,37,165,1,0,
        0,0,39,169,1,0,0,0,41,174,1,0,0,0,43,179,1,0,0,0,45,184,1,0,0,0,
        47,188,1,0,0,0,49,50,5,102,0,0,50,51,5,117,0,0,51,52,5,110,0,0,52,
        53,5,99,0,0,53,54,5,32,0,0,54,55,5,112,0,0,55,56,5,114,0,0,56,57,
        5,111,0,0,57,58,5,99,0,0,58,59,5,101,0,0,59,60,5,115,0,0,60,61,5,
        115,0,0,61,62,5,40,0,0,62,63,5,41,0,0,63,2,1,0,0,0,64,65,5,123,0,
        0,65,4,1,0,0,0,66,67,5,125,0,0,67,6,1,0,0,0,68,69,5,102,0,0,69,70,
        5,117,0,0,70,71,5,110,0,0,71,72,5,99,0,0,72,73,5,32,0,0,73,74,5,
        99,0,0,74,75,5,111,0,0,75,76,5,109,0,0,76,77,5,112,0,0,77,78,5,111,
        0,0,78,79,5,115,0,0,79,80,5,101,0,0,80,81,5,40,0,0,81,82,5,41,0,
        0,82,8,1,0,0,0,83,84,5,61,0,0,84,10,1,0,0,0,85,86,5,40,0,0,86,12,
        1,0,0,0,87,88,5,44,0,0,88,14,1,0,0,0,89,90,5,41,0,0,90,16,1,0,0,
        0,91,92,5,108,0,0,92,93,5,111,0,0,93,94,5,97,0,0,94,95,5,100,0,0,
        95,18,1,0,0,0,96,97,5,100,0,0,97,98,5,101,0,0,98,99,5,108,0,0,99,
        100,5,97,0,0,100,101,5,121,0,0,101,20,1,0,0,0,102,103,5,115,0,0,
        103,104,5,101,0,0,104,105,5,116,0,0,105,106,5,114,0,0,106,107,5,
        101,0,0,107,108,5,118,0,0,108,109,5,101,0,0,109,110,5,114,0,0,110,
        111,5,98,0,0,111,22,1,0,0,0,112,113,5,115,0,0,113,114,5,101,0,0,
        114,115,5,116,0,0,115,116,5,103,0,0,116,117,5,97,0,0,117,118,5,105,
        0,0,118,119,5,110,0,0,119,24,1,0,0,0,120,121,5,99,0,0,121,122,5,
        104,0,0,122,123,5,97,0,0,123,124,5,110,0,0,124,125,5,103,0,0,125,
        126,5,101,0,0,126,127,5,112,0,0,127,128,5,105,0,0,128,129,5,116,
        0,0,129,130,5,99,0,0,130,131,5,104,0,0,131,26,1,0,0,0,132,133,5,
        102,0,0,133,134,5,97,0,0,134,135,5,100,0,0,135,136,5,101,0,0,136,
        137,5,105,0,0,137,138,5,110,0,0,138,28,1,0,0,0,139,140,5,102,0,0,
        140,141,5,97,0,0,141,142,5,100,0,0,142,143,5,101,0,0,143,144,5,111,
        0,0,144,145,5,117,0,0,145,146,5,116,0,0,146,30,1,0,0,0,147,148,5,
        112,0,0,148,149,5,108,0,0,149,150,5,97,0,0,150,151,5,121,0,0,151,
        32,1,0,0,0,152,153,5,115,0,0,153,154,5,112,0,0,154,155,5,108,0,0,
        155,156,5,105,0,0,156,157,5,99,0,0,157,158,5,101,0,0,158,34,1,0,
        0,0,159,160,5,102,0,0,160,161,5,117,0,0,161,162,5,110,0,0,162,163,
        5,99,0,0,163,164,5,32,0,0,164,36,1,0,0,0,165,166,5,47,0,0,166,167,
        5,47,0,0,167,38,1,0,0,0,168,170,7,0,0,0,169,168,1,0,0,0,170,171,
        1,0,0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,40,1,0,0,0,173,175,7,
        1,0,0,174,173,1,0,0,0,175,176,1,0,0,0,176,174,1,0,0,0,176,177,1,
        0,0,0,177,42,1,0,0,0,178,180,7,2,0,0,179,178,1,0,0,0,180,181,1,0,
        0,0,181,179,1,0,0,0,181,182,1,0,0,0,182,44,1,0,0,0,183,185,7,3,0,
        0,184,183,1,0,0,0,185,186,1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,
        0,187,46,1,0,0,0,188,189,7,4,0,0,189,190,1,0,0,0,190,191,6,23,0,
        0,191,48,1,0,0,0,5,0,171,176,181,186,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    STRING = 20
    NEWLINE = 21
    INT = 22
    CHR = 23
    WS = 24

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'func process()'", "'{'", "'}'", "'func compose()'", "'='", 
            "'('", "','", "')'", "'load'", "'delay'", "'setreverb'", "'setgain'", 
            "'changepitch'", "'fadein'", "'fadeout'", "'play'", "'splice'", 
            "'func '", "'//'" ]

    symbolicNames = [ "<INVALID>",
            "STRING", "NEWLINE", "INT", "CHR", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "STRING", 
                  "NEWLINE", "INT", "CHR", "WS" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


